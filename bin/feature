#!/usr/bin/env ruby
require_relative '../lib/signal_handlers.rb'
require_relative '../lib/github.rb'
require_relative '../lib/git.rb'
require_relative '../lib/helpers.rb'

command=ARGV.first

$0 = ARGV.join(" ")

case command
when 'github-test'
   octokit = Github::api
   # Should succeed if authentication is setup.
   octokit.pulls(Github::get_github_repo)
   puts "[Successfully Authenticated]"

when 'start'
   require_argument(:feature, :start)
   feature = ARGV[1]

   exit unless confirm("Create feature branch named: '#{feature}' ?")

   Git::run_safe([
      "git checkout #{Git::development_branch}",
      "git pull --rebase",
      "git branch \"#{feature}\" #{Git::development_branch}",
      "git checkout \"#{feature}\"",
   ])

   Git::submodules_update

   # Automatically setup remote tracking branch
   Git::run_safe([
      "git config branch.#{feature}.remote origin",
      "git config branch.#{feature}.merge refs/heads/#{feature}",
      "git config branch.#{feature}.rebase true"
   ])

   puts "Successfully created a new feature-branch: #{feature}"

when 'status'
   current = Git::current_branch
   Git::run_safe(["git fetch"])

   upstream = `git rev-parse --verify --quiet #{current}@{upstream} 2>/dev/null`.strip
   if upstream == ''
      die "Your branch #{current} hasn't been pushed"
   end

   git_command = 'git log --graph --boundary --color=always --decorate --date-order'
   incoming = `#{git_command} #{current}..#{upstream}`.strip
   outgoing = `#{git_command} #{upstream}..#{current}`.strip
   incoming = nil if incoming == ''
   outgoing = nil if outgoing == ''

   if (incoming && outgoing)
      # Show the whole history graph (... == through common ancestor)
      puts `#{git_command} #{upstream}...#{current}`.strip
      puts HIGHLIGHT
      puts "Your branch has diverged from the remote branch"
   elsif incoming
      puts incoming
      puts HIGHLIGHT
      puts "Your branch is behind the remote branch"
   elsif outgoing
      puts outgoing
      puts HIGHLIGHT
      puts "Your branch is ahead of the remote branch"
   else
      puts HIGHLIGHT
      puts "Your branch is up to date"
   end
   print HIGHLIGHT_OFF


when 'finish'
   feature = ARGV[1] || Git::current_branch
   # Push commits to origin
   Git::run_safe(["git push origin #{feature}:#{feature}"])

   exit 1 unless confirm("Create a pull-request for feature branch named: '#{feature}' ?")
   octokit = Github::api

   description = Github::get_pull_request_description(feature)
   puts "Pull-request description:"
   puts description[:title]
   puts "#"
   puts description[:body]

   response = octokit.create_pull_request(
      Github::get_github_repo,
      Git::development_branch,
      feature,
      description[:title],
      description[:body]
   )

   puts "Successfully created pull-request ##{response[:number]}"
   puts "   " + response[:html_url]

when 'merge'
   dev_branch = Git::development_branch
   fail_on_local_changes

   Git::run_safe(["git fetch"])

   feature = ARGV[1] || Git::current_branch

   pull_info = Github::get_pull_request_info_from_api(feature, dev_branch)

   warning = Github::warn_about_commit_status(pull_info[:status])
   unless warning.empty?
      puts highlight(warning)
   end

   exit 1 unless confirm("Merge feature branch named: '#{feature}' ?")

   # Checkout the branch first to make sure we have it locally.
   Git::run_safe([
      "git checkout \"#{feature}\"",
      "git rebase --preserve-merges origin/#{feature}",
      # pull the latest changes from master
      "git checkout #{dev_branch}",
      # rebase the unpushed master commits if any.
      "git rebase --preserve-merges origin/#{dev_branch}",
      # merge the feature branch into master
      "git merge --no-ff --edit -m #{pull_info[:description].shellescape} \"#{feature}\"",
   ])

   # init any submodules in the master branch
   Git::submodules_update

   # delete the local feature-branch
   Git::run_safe(["git branch -d \"#{feature}\""])

   # delete the remote branch we'll leave this off for now
   # Git::run_safe("git push origin :\"#{feature}\"")
   # push the the merge to our origin
   # Git::run_safe("git push origin")

   puts
   puts "Successfully merged feature-branch: #{feature} into #{dev_branch}"
   puts "If you are satisfied with the result, do this:\n" + <<CMDS
      git push
CMDS

when 'switch'
   require_argument(:feature, :switch, min=2, max=3)
   feature = ARGV[1]

   Git::switch_branch(feature)

when 'prune'
   require_argument(:feature, :prune, min=3, max=3)
   location = ARGV[1]
   option = ARGV[2]

   # Check arguments.
   if location != "local" and location != "origin"
      abort("Valid locations: local, origin.")
   end

   if option != "preview" and option != "clean"
      abort("Valid options: preview, clean.")
   end

   currentBranch = Git::current_branch()

   def branches_cmd(location, currentBranch)
      branch = location == 'origin' ? 'origin/master' : 'master'
      return "git branch --merged #{branch} |
         grep -v master |
         grep -v stable |
         grep -v #{currentBranch}"
   end

   def preview(location, currentBranch)
      puts "Would delete the following..."
      commands = branches_cmd(location, currentBranch)

      if location == "local"
         system(commands)
      elsif location == "origin"
         message = `git remote prune -n origin && #{commands}`
         puts message.gsub(" * [would prune] origin/",'')
      end
   end

   def delete(location, currentBranch)
      puts "Deleting..."
      commands = branches_cmd(location, currentBranch)

      if location == "local"
         system("#{commands} | xargs git branch -d")
      elsif location == "origin"
          system("git remote prune origin &&
                git branch -r --merged origin/master |
                grep -v master |
                grep -v stable |
                grep -v #{currentBranch} |
                sed -n 's| origin/|:|p' |
                xargs git push origin")
      end
   end

   if option == 'preview'
      preview(location, currentBranch)
   elsif option == 'clean'
      exit unless confirm("Are you sure you want to prune branches?")
      delete(location, currentBranch)
   end

when 'clean'
   args = ''

   # Remove all untracked .gitignore'd files as well
   args += 'x' if ARGV.include?('--all')

   # -fd alone will NOT remove submodule directories, -ffd is required for this
   Git::run_safe(["git clean -ffd#{args}"])

when 'pull'
   Git::run_safe(["git fetch"])

   current = Git::current_branch
   upstream = "#{current}@{upstream}"
   upstream_hash = Git::branch_hash(upstream)

   if upstream_hash == ''
      die "Your branch #{current} hasn't been pushed, nothing to pull from"
   end

   old_branch_hash = Git::branch_hash(current)
   Git::run_safe(["git rebase --preserve-merges origin/#{current}"])

   Git::submodules_update

   if Git::branch_hash(current) == old_branch_hash
      die "No changes in the remote branch. Your branch is up to date."
   end

when 'list'
   options = {
      :feature => Git::feature_branches(:unmerged)
   }
   if ARGV.include?('-v')
      options[:merged] = Git::feature_branches(:merged)
   end
   Git.show_branch_list(options)

when 'stashes'
   current_branch = nil

   unless ARGV.include?('-v')
      current_branch = Git::current_branch
   end

   Git::show_stashes_saved_on(current_branch)

else
   display_feature_help
end

log_command("feature #{$0}")
