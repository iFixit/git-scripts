#!/usr/bin/env ruby
require_relative '../lib/github.rb'
require_relative '../lib/git.rb'
require_relative '../lib/helpers.rb'

command=ARGV.first

case command
when 'github-test'
   octokit = Github::api
   # Should succeed if authentication is setup.
   octokit.pulls(Github::get_github_repo)
   puts "[Successfully Authenticated]"

when 'start'
   require_argument(:feature, :start)
   feature = ARGV[1]

   exit if !confirm("Create feature branch named: '#{feature}' ?")

   Git::run_safe("git checkout #{Git::development_branch}")
   Git::run_safe("git pull --rebase")
   Git::run_safe("git branch \"#{feature}\" #{Git::development_branch}")
   Git::run_safe("git checkout \"#{feature}\"")

   Git::submodules_update

   # Automatically setup remote tracking branch
   Git::branch_config(feature)

   puts "Successfully created a new feature-branch: #{feature}"

when 'status'
   current = Git::current_branch
   Git::run_safe("git fetch")

   upstream = `git rev-parse --verify --quiet #{current}@{upstream} 2>/dev/null`.strip
   if upstream == ''
      die "Your branch #{current} hasn't been pushed"
   end

   git_command = 'git log --graph --boundary --color=always --decorate --date-order'
   incoming = `#{git_command} #{current}..#{upstream}`.strip
   outgoing = `#{git_command} #{upstream}..#{current}`.strip
   incoming = nil if incoming == ''
   outgoing = nil if outgoing == ''

   if (incoming && outgoing)
      # Show the whole history graph (... == through common ancestor)
      puts `#{git_command} #{upstream}...#{current}`.strip
      puts HIGHLIGHT
      puts "Your branch has diverged from the remote branch"
   elsif incoming
      puts incoming
      puts HIGHLIGHT
      puts "Your branch is behind the remote branch"
   elsif outgoing
      puts outgoing
      puts HIGHLIGHT
      puts "Your branch is ahead of the remote branch"
   else
      puts HIGHLIGHT
      puts "Your branch is up to date"
   end
   print HIGHLIGHT_OFF


when 'finish'
   feature = ARGV[1] || Git::current_branch
   # Push commits to origin
   Git::run_safe("git push origin #{feature}:#{feature}")

   exit 1 if !confirm("Create a pull-request for feature branch named: '#{feature}' ?")
   octokit = Github::api

   description = Github::get_pull_request_description(feature)
   puts "Pull-request description:"
   puts description[:title]
   puts "#"
   puts description[:body]

   response = octokit.create_pull_request(
      Github::get_github_repo,
      Git::development_branch,
      feature,
      description[:title],
      description[:body]
   )

   puts "Successfully created pull-request ##{response[:number]}"
   puts "   " + response[:html_url]

when 'merge'
   dev_branch = Git::development_branch
   fail_on_local_changes
   Git::run_safe("git fetch")

   feature = ARGV[1] || Git::current_branch

   exit 1 if !confirm("Merge feature branch named: '#{feature}' ?")

   description = Github::get_pull_request_description_from_api(feature, dev_branch)

   # Checkout the branch first to make sure we have it locally.
   Git::run_safe("git fetch")
   Git::run_safe("git checkout \"#{feature}\"")

   Git::run_safe("git rebase --preserve-merges origin/#{feature}")

   # pull the latest changes from master
   Git::run_safe("git checkout #{dev_branch}")

   # rebase the unpushed master commits if any.
   Git::run_safe("git rebase --preserve-merges origin/#{dev_branch}")

   # merge the feature branch into master
   Git::run_safe("git merge --no-ff --edit -m #{description.shellescape} \"#{feature}\"")

   # init any submodules in the master branch
   Git::submodules_update

   # delete the local feature-branch
   Git::run_safe("git branch -d \"#{feature}\"")

   # delete the remote branch we'll leave this off for now
   # Git::run_safe("git push origin :\"#{feature}\"")
   # push the the merge to our origin
   # Git::run_safe("git push origin")

   puts
   puts "Successfully merged feature-branch: #{feature} into #{dev_branch}"

when 'switch'
   require_argument(:feature, :switch, min=2, max=3)
   feature = ARGV[1]

   Git::switch_branch(feature)

when 'clean'
   args = ''

   # Remove all untracked .gitignored files as well
   args += 'x' if ARGV.include?('--all')

   # -fd alone will NOT remove submodule directories, -ffd is required for this
   Git::run_safe("git clean -ffd#{args}")

when 'pull'
   Git::run_safe("git fetch")

   current = Git::current_branch
   upstream = "#{current}@{upstream}"
   upstream_hash = Git::branch_hash(upstream)

   if upstream_hash == ''
      die "Your branch #{current} hasn't been pushed, nothing to pull from"
   end

   old_branch_hash = Git::branch_hash(current)
   Git::run_safe("git rebase --preserve-merges origin/#{current}")

   Git::submodules_update

   if Git::branch_hash(current) == old_branch_hash
      die "No changes in the remote branch. Your branch is up to date."
   end

when 'list'
   options = {
      :feature => Git::feature_branches(:unmerged)
   }
   if ARGV.include?('-v')
      options[:merged] = Git::feature_branches(:merged)
   end
   Git.show_branch_list(options)

when 'stashes'
   current_branch = nil

   if !ARGV.include?('-v')
      current_branch = Git::current_branch
   end

   Git::show_stashes_saved_on(current_branch)

when 'cherry'
   require_argument(:feature, :cherry, min=3, max=4)

   feature = ARGV[1]
   sha = ARGV[2]

   exit if !confirm("Create feature branch named: '#{feature}' ?")

   Git::run_safe("git fetch")
   Git::run_safe("git checkout -b #{feature} origin/#{Git::development_branch}")
   Git::run_safe("git pull --rebase")

   Git::init_submodules

   # Automatically setup remote tracking branch
   Git::branch_config(feature)

   # cherry pick the commits from your local master onto the new feature
   Git::run_safe("git cherry-pick #{sha}")

else
   display_feature_help
end

