#!/usr/bin/env ruby
require_relative '../lib/signal_handlers.rb'
require_relative '../lib/github.rb'
require_relative '../lib/git.rb'
require_relative '../lib/helpers.rb'
require_relative '../lib/plugins.rb'

command=ARGV.first

$0 = ARGV.join(" ")

unless command == '--help' or command == '-h'
   unless Git::in_a_repo
      die("\nSwitch to a git repo. If you need help, use --help or -h.")
   end
end

case command
when 'github-test'
   # Should succeed if authentication is setup.
   Github.pulls
   puts "[Successfully Authenticated]"

when 'start'
   require_argument(:feature, :start)
   feature = ARGV[1]

   development_branch = Git::get_branch('development')

   Plugins.invoke :before_start, :feature, feature

   Git::run_safe([
      "git checkout #{development_branch}",
      "git fetch",
      "git rebase --preserve-merges origin/#{development_branch}",
      "git branch \"#{feature}\" #{development_branch}",
      "git checkout \"#{feature}\"",
   ])

   Git::submodules_update

   # Automatically setup remote tracking branch
   Git::run_safe([
      "git config branch.#{feature}.remote origin",
      "git config branch.#{feature}.merge refs/heads/#{feature}",
      "git config branch.#{feature}.rebase true"
   ])

   puts "Successfully created a new feature-branch: #{feature}"

   Plugins.invoke :after_start, :feature, feature

when 'status'
   current = Git::current_branch
   Git::run_safe(["git fetch"])

   upstream = `git rev-parse --verify --quiet #{current}@{upstream} 2>/dev/null`.strip
   if upstream == ''
      die "Your branch #{current} hasn't been pushed"
   end

   git_command = 'git log --graph --boundary --color=always --decorate --date-order'
   incoming = `#{git_command} #{current}..#{upstream}`.strip
   outgoing = `#{git_command} #{upstream}..#{current}`.strip
   incoming = nil if incoming == ''
   outgoing = nil if outgoing == ''

   if (incoming && outgoing)
      # Show the whole history graph (... == through common ancestor)
      puts `#{git_command} #{upstream}...#{current}`.strip
      puts HIGHLIGHT
      puts "Your branch has diverged from the remote branch"
   elsif incoming
      puts incoming
      puts HIGHLIGHT
      puts "Your branch is behind the remote branch"
   elsif outgoing
      puts outgoing
      puts HIGHLIGHT
      puts "Your branch is ahead of the remote branch"
   else
      puts HIGHLIGHT
      puts "Your branch is up to date"
   end
   print HIGHLIGHT_OFF


when 'finish'
   feature = ARGV[1] || Git::current_branch

   # Push commits to origin
   Git::run_safe(["git push origin #{feature}:#{feature}"])

   exit 1 unless confirm("Create a pull-request for feature branch named: '#{feature}' ?")
   octokit = Github::api

   Plugins.invoke :before_finish, :feature, feature

   description = Github::get_pull_request_description(feature)
   puts "Pull-request description:"
   puts description[:title]
   puts "#"
   puts description[:body]

   response = octokit.create_pull_request(
      Github::get_github_repo,
      Git::get_branch('development'),
      feature,
      description[:title],
      description[:body]
   )

   Plugins.invoke :after_finish, :feature, feature, response
   puts "Successfully created pull-request ##{response[:number]}"
   puts "   " + response[:html_url]

when 'finish-issue'
   require_argument(:feature, :'finish-issue')
   issue = ARGV[1]
   feature = Git::current_branch

   # Push commits to origin
   Git::run_safe(["git push origin #{feature}:#{feature}"])

   exit 1 unless confirm("Convert issue ##{issue} into a pull-request using " +
    "feature branch named '#{feature}' ?")
   octokit = Github::api

   pull = octokit.create_pull_request_for_issue(
      Github::get_github_repo,
      Git::get_branch('development'),
      feature,
      issue
   )

   # We've converted the issue to a pull request, now lets change the
   # description to include the last commit message and prompt the user to
   # confirm it.

   last_commit_message = Git::commit_message(feature)

   original_title = pull[:title].gsub("\r","")
   original_body = pull[:body].gsub("\r","")

   initial_message = <<-MESSAGE
#{last_commit_message}

----

Original issue: #{original_title}
----

#{original_body}
   MESSAGE

   description = Github::open_title_body_editor(initial_message)

   updated_pull = octokit.update_pull_request(
      Github::get_github_repo,
      issue,
      description[:title],
      description[:body]
   )

   puts "Successfully converted issue ##{issue} to a pull-request"
   puts "   " + updated_pull[:html_url]

when 'merge'
   dev_branch = Git::get_branch('development')
   fail_on_local_changes

   if ARGV[1] == '-n'
       feature = get_branch_name_from_number(ARGV[2])
   else
      feature = ARGV[1] || Git::current_branch
   end

   pull_info = Github::get_pull_request_info_from_api(feature, dev_branch)

   warning = Github::get_commit_status_warning(pull_info[:status])
   unless warning.empty?
      puts highlight(warning)
   end

   Plugins.invoke :before_merge, :feature, feature

   exit 1 unless confirm("Merge feature branch named: '#{feature}' ?")

   update = Git::submodules_update("get")
   pull_desc = pull_info[:description]
   merge_failure_message =
    "Merge conflicts detected, merge #{dev_branch} into #{feature} and resolve conflicts."
   abort_merge =
    "(git merge --abort && echo #{highlight(merge_failure_message.shellescape)} && exit 1)"

   Git::run_safe([
      "git fetch",
      # Checkout the branch first to make sure we have it locally.
      "git checkout \"#{feature}\"",
      "git rebase --preserve-merges origin/#{feature}",
      # pull the latest changes from master
      "git checkout #{dev_branch}",
      # rebase the unpushed master commits if any.
      "git rebase --preserve-merges origin/#{dev_branch}",
      # merge the feature branch into master
      "git merge --no-ff --edit -m #{pull_desc.shellescape} \"#{feature}\" || #{abort_merge}",
      # init any submodules in the master branch
      "#{update}",
      # delete the local feature-branch
      "git branch -d \"#{feature}\""
   ])

   Plugins.invoke :after_merge, :feature, feature

   puts
   puts "Successfully merged feature-branch: #{feature} into #{dev_branch}"
   puts "If you are satisfied with the result, do this:\n" + <<CMDS
      git push
CMDS

when 'switch'

   require_argument(:feature, :switch, min=2, max=5)

   feature = ARGV[1]

   Plugins.invoke :before_switch, :feature, feature

   if ARGV[1] == '-n'
       feature = get_branch_name_from_number(ARGV[2])
   end

   Git::switch_branch(feature)

   optional_pull

   Plugins.invoke :after_switch, :feature, feature

when 'url'
   require_argument(:feature, :url, min=1, max=2)
   feature = ARGV[1] || Git::current_branch

   url = Github::get_url(feature)
   if url
      puts url
   else
      abort "There is no pull request available for #{feature}.\n" +
            'You can make one by using `feature finish`.'
   end

when 'prune'
   require_argument(:feature, :prune, min=3, max=3)
   location = ARGV[1]
   option = ARGV[2]

   # Check arguments.
   if location != "local" and location != "origin"
      abort("Valid locations: local, origin.")
   end

   if option != "preview" and option != "clean"
      abort("Valid options: preview, clean.")
   end

   current_branch = Git::current_branch()
   development_branch = Git::get_branch('development')
   stable_branch = Git::get_branch('stable')

   # Returns a shell command that will output a list of branches that can be
   # safely pruned (are merged into the development_branch).
   # Note: if location != 'local' this will return remote branches
   branches_cmd = lambda do
      if location == 'local'
         branch = development_branch
         options = ''
         prefix=''
      else
         branch = "#{location}/#{development_branch}"
         options = '--remotes'
         prefix='origin/'
      end
      return "git branch #{options} --merged #{esc branch} |
              sed 's/^* //g' | sed 's/^\s*//' |
              grep --invert-match --line-regexp \
                 --regexp=#{esc (prefix + development_branch)} \
                 --regexp=#{esc (prefix + stable_branch)} \
                 --regexp=#{esc (prefix + current_branch)}"
   end

   preview = lambda do
      puts "Would delete the following..."

      system(branches_cmd.call)

      if location != "local"
         system("git remote prune --dry-run #{esc location}")
      end
   end

   delete = lambda do |preview = true|
      puts "Deleting..."

      # Delete 50 branches at a time. 1 is too slow but github fails on 4000
      # So 50 seems reasonable
      xargs_args = "--max-args=50 --max-procs=1"

      if location == "local"
         action_command = "xargs #{xargs_args} git branch -d"
      else
         sed_str = "s|^#{location}/|:|p"
         # prune branches in our copy of the remote that have been deleted
         # in the origin
         system("git remote prune #{esc location}")
         action_command = "sed -n #{esc sed_str} | xargs #{xargs_args} git push origin"
      end

      if `#{branches_cmd.call}`.empty?
         puts "No branches need to be pruned"
         return
      end

      system("#{branches_cmd.call} | #{action_command}")
   end

   if option == 'preview'
      preview.call
   elsif option == 'clean'
      exit unless confirm("Are you sure you want to prune branches?")
      delete.call
   end

when 'pull'
   Git::run_safe(["git fetch"])

   current = Git::current_branch
   upstream = "#{current}@{upstream}"
   upstream_hash = Git::branch_hash(upstream)

   if upstream_hash == ''
      die "Your branch #{current} hasn't been pushed, nothing to pull from"
   end

   old_branch_hash = Git::branch_hash(current)
   Git::run_safe(["git rebase --preserve-merges origin/#{current}"])

   Git::submodules_update

   if Git::branch_hash(current) == old_branch_hash
      die "No changes in the remote branch. Your branch is up to date."
   end

when 'list'
   options = {
      :feature => Git::feature_branches(:unmerged)
   }
   if ARGV.include?('-v')
      options[:merged] = Git::feature_branches(:merged)
   end
   Git.show_branch_list(options)

when 'stashes'
   current_branch = nil

   unless ARGV.include?('-v')
      current_branch = Git::current_branch
   end

   Git::show_stashes_saved_on(current_branch)

else
   display_feature_help
end

log_command("feature #{$0}")
