#!/usr/bin/env ruby
require_relative '../lib/signal_handlers.rb'
require_relative '../lib/github.rb'
require_relative '../lib/git.rb'
require_relative '../lib/helpers.rb'

command=ARGV.first

$0 = ARGV.join(" ")

case command
when 'start'
   require_argument(:hotfix, :start)
   hotfix = hotfix_branch(ARGV[1])

   exit if !confirm("Create hotfix branch named: '#{hotfix}' ?")

   Git::run_safe("git checkout stable")
   Git::run_safe("git pull --rebase")
   Git::run_safe("git branch \"#{hotfix}\" stable")
   Git::run_safe("git checkout \"#{hotfix}\"")

   Git::submodules_update

   # Automatically setup remote tracking branch
   Git::run_safe("git config branch.#{hotfix}.remote origin")
   Git::run_safe("git config branch.#{hotfix}.merge refs/heads/#{hotfix}")
   Git::run_safe("git config branch.#{hotfix}.rebase true")

when 'switch'
   require_argument(:hotfix, :switch, min=2, max=3)
   hotfix = current_hotfix_branch

   Git::switch_branch(hotfix)

when 'finish'
   hotfix = current_hotfix_branch

   # Push commits to origin
   Git::run_safe("git push origin #{hotfix}:#{hotfix}")

   exit 1 if !confirm("Create a pull-request for hotfix branch named: '#{hotfix}' ?")
   octokit = Github::api

   description = Github::get_pull_request_description(hotfix)
   puts "Pull-request description:"
   puts description[:title]
   puts "#"
   puts description[:body]

   response = octokit.create_pull_request(
      Github::get_github_repo,
      'stable',
      hotfix,
      description[:title],
      description[:body]
   )

   puts "Successfully created pull-request ##{response[:number]}"
   puts "   " + response[:html_url]

when 'finish-issue'
   issue = ARGV[1]
   hotfix = Git::current_branch

   # Push commits to origin
   Git::run_safe("git push origin #{hotfix}:#{hotfix}")

   exit 1 unless confirm("Convert issue ##{issue} into a pull-request using " +
    "hotfix branch named '#{hotfix}' ?")
   octokit = Github::api

   response = octokit.create_pull_request_for_issue(
      Github::get_github_repo,
      'stable',
      hotfix,
      issue
   )

   puts "Successfully converted issue ##{issue} to a pull-request"
   puts "   " + response[:html_url]

when 'merge'
   fail_on_local_changes
   dev_branch = Git::development_branch
   hotfix = current_hotfix_branch

   Git::run_safe("git fetch")

   exit 1 if !confirm("Merge hotfix named: '#{hotfix}' ?")

   description = Github::get_pull_request_description_from_api(hotfix, 'stable')

   # Checkout the branch to make sure we have it locally.
   Git::run_safe("git checkout \"#{hotfix}\"")
   Git::run_safe("git rebase --preserve-merges origin/#{hotfix}")

   # Merge into stable
   Git::run_safe("git checkout stable")

   # pull the latest changes and rebase the unpushed commits if any.
   Git::run_safe("git rebase --preserve-merges origin/stable")

   # merge the hotfix branch into stable
   Git::run_safe("git merge --no-ff --edit -m #{description.shellescape} \"#{hotfix}\"")

   # init any submodules in the stable branch
   Git::submodules_update
   # push the the merge to our origin
   # Git::run_safe("git push origin")

   description = Github::get_pull_request_description_from_api(hotfix, dev_branch)

   # Merge into master
   Git::run_safe("git checkout #{dev_branch}")

   # pull the latest changes and rebase the unpushed master commits if any.
   Git::run_safe("git rebase origin/#{dev_branch}")

   # merge the hotfix branch into master
   Git::run_safe("git merge --no-ff --edit -m #{description.shellescape} \"#{hotfix}\"")

   # init any submodules in the master branch. Note: no need to change
   # directories before calling git submodule since we are already in the
   # projects top-level directory
   Git::submodules_update

   # push the the merge to our origin
   # Git::run_safe("git push origin")

   # delete the local hotfix branch
   Git::run_safe("git branch -d \"#{hotfix}\"")
   # delete the remote hotfix branch -- we'll leave this off for now
   # Git::run_safe("git push origin :\"#{hotfix}\"")

   # checkout stable branch
   Git::run_safe("git checkout stable")

   puts "Successfully merged hotfix branch: #{hotfix} into stable and #{dev_branch}"
   puts "If you are satisfied with the result, do this:\n" + <<CMDS
      git push
      git checkout #{dev_branch}
      git push
CMDS

when 'list'
   options = {
      :hotfix => Git::hotfix_branches(:unmerged)
   }
   if ARGV.include?('-v')
      options[:merged] = Git::hotfix_branches(:merged)
   end
   Git.show_branch_list(options)
else
   display_hotfix_help
end
